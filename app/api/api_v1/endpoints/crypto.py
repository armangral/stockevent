from fastapi import APIRouter, HTTPException, Depends, Query
from sqlalchemy.ext.asyncio import AsyncSession

from app.api.deps import get_session
from app.crud.crypto import fetch_crypto_data_crud, fetch_historical_data


router = APIRouter()


@router.get("/usd")
async def get_crypto_data_usd(
    db: AsyncSession = Depends(get_session),
    skip: int = Query(0, alias="offset"),
    limit: int = Query(10),
):
    crypto_symbols = [
        "BTC",
        "ETH",
        "BNB",
        "SOL",
        "XRP",
        "ADA",
        "AVAX",
        "DOGE",
        "DOT",
        "MATIC",
        "LINK",
        "LTC",
        "UNI",
        "SHIB",
        "TRX",
        "XLM",
        "ATOM",
        "CRO",
        "BCH",
        "ALGO",
        "ETC",
        "FIL",
        "VET",
        "MANA",
        "THETA",
        "AXS",
        "ICP",
        "FTT",
        "XTZ",
        "EOS",
        "SAND",
        "AAVE",
        "EGLD",
        "HBAR",
        "MIOTA",
        "XMR",
        "CAKE",
        "FTM",
        "NEO",
        "KSM",
        "ONE",
        "MKR",
        "ENJ",
        "RUNE",
        "ZEC",
        "CHZ",
        "QNT",
        "HOT",
        "BAT",
        "DASH",
        "WAVES",
        "AMP",
        "COMP",
        "STX",
        "CELO",
        "AR",
        "KLAY",
        "LRC",
        "HNT",
        "DCR",
        "TFUEL",
        "YFI",
        "ICX",
        "OMG",
        "1INCH",
        "KNC",
        "CRV",
        "ZEN",
        "QTUM",
        "SUSHI",
        "ZIL",
        "ANKR",
        "IOTX",
        "RVN",
        "BAKE",
        "SNX",
        "GRT",
        "BNT",
        "SC",
        "STORJ",
        "ONT",
        "IOST",
        "CELR",
        "REN",
        "DGB",
        "SKL",
        "RSR",
        "OGN",
        "LUNA",
        "CKB",
        "NKN",
        "PERP",
        "SRM",
        "KDA",
        "CTSI",
        "ERG",
        "CFX",
    ][skip : skip + limit]

    data = await fetch_crypto_data_crud(db, crypto_symbols, currency="USD")
    if not data:
        raise HTTPException(status_code=404, detail="No data found")

    return data


@router.get("/gbp")
async def get_crypto_data_gbp(
    db: AsyncSession = Depends(get_session),
    skip: int = Query(0, alias="offset"),
    limit: int = Query(10),
):
    crypto_symbols = [
        "BTC",
        "ETH",
        "BNB",
        "SOL",
        "XRP",
        "ADA",
        "AVAX",
        "DOGE",
        "DOT",
        "MATIC",
        "LINK",
        "LTC",
        "UNI",
        "SHIB",
        "TRX",
        "XLM",
        "ATOM",
        "CRO",
        "BCH",
        "ALGO",
        "ETC",
        "FIL",
        "VET",
        "MANA",
        "THETA",
        "AXS",
        "ICP",
        "FTT",
        "XTZ",
        "EOS",
        "SAND",
        "AAVE",
        "EGLD",
        "HBAR",
        "MIOTA",
        "XMR",
        "CAKE",
        "FTM",
        "NEO",
        "KSM",
        "ONE",
        "MKR",
        "ENJ",
        "RUNE",
        "ZEC",
        "CHZ",
        "QNT",
        "HOT",
        "BAT",
        "DASH",
        "WAVES",
        "AMP",
        "COMP",
        "STX",
        "CELO",
        "AR",
        "KLAY",
        "LRC",
        "HNT",
        "DCR",
        "TFUEL",
        "YFI",
        "ICX",
        "OMG",
        "1INCH",
        "KNC",
        "CRV",
        "ZEN",
        "QTUM",
        "SUSHI",
        "ZIL",
        "ANKR",
        "IOTX",
        "RVN",
        "BAKE",
        "SNX",
        "GRT",
        "BNT",
        "SC",
        "STORJ",
        "ONT",
        "IOST",
        "CELR",
        "REN",
        "DGB",
        "SKL",
        "RSR",
        "OGN",
        "LUNA",
        "CKB",
        "NKN",
        "PERP",
        "SRM",
        "KDA",
        "CTSI",
        "ERG",
        "CFX",
    ][skip : skip + limit]

    data = await fetch_crypto_data_crud(db, crypto_symbols, currency="GBP")
    if not data:
        raise HTTPException(status_code=404, detail="No data found")

    return data


@router.get("/usd/{symbol}")
async def get_crypto_statistics_usd(symbol: str):
    return fetch_historical_data(symbol, currency="USD")

@router.get("/gbp/{symbol}")
async def get_crypto_statistics_gbp(symbol: str):
    return fetch_historical_data(symbol, currency="GBP")


